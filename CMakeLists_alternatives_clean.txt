cmake_minimum_required(VERSION 3.10)
project(FlightControls_Alternatives_Clean)

# 设置C++标准
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# 项目信息
set(PROJECT_VERSION "2.0.0")
set(PROJECT_DESCRIPTION "FlightControls Alternative Launchers - Clean Version")

# 查找Qt5组件
find_package(Qt5 REQUIRED COMPONENTS Core Widgets Gui)

# 查找X11库
find_package(X11 REQUIRED)

# 可选的Qt WebEngine支持
find_package(Qt5WebEngineWidgets QUIET)

# 包含目录
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src)
include_directories(${X11_INCLUDE_DIR})

# 设置Qt自动化工具
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)

# 编译选项
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-unused-parameter")

# ===========================================
# 方案1: WindowManager - 窗口快速切换方案
# ===========================================
add_executable(window_manager_demo
    src/WindowManager.cpp
    src/WindowManager.h
    examples/window_manager_simple.cpp
)

target_link_libraries(window_manager_demo
    Qt5::Core
    Qt5::Widgets
    Qt5::Gui
    ${X11_LIBRARIES}
)

target_compile_definitions(window_manager_demo PRIVATE
    -DAPP_VERSION="${PROJECT_VERSION}"
    -DAPP_NAME="WindowManager Demo"
)

# ===========================================
# 方案2: TabBasedLauncher - Tab界面方案
# ===========================================
if(Qt5WebEngineWidgets_FOUND)
    message(STATUS "Building TabBasedLauncher with WebEngine support")
    
    add_executable(tab_launcher_demo
        src/TabBasedLauncher.cpp
        src/TabBasedLauncher.h
        examples/tab_launcher_main.cpp
    )

    target_link_libraries(tab_launcher_demo
        Qt5::Core
        Qt5::Widgets
        Qt5::Gui
        Qt5::WebEngineWidgets
        ${X11_LIBRARIES}
    )
    
    target_compile_definitions(tab_launcher_demo PRIVATE
        -DQT_WEBENGINEWIDGETS_LIB
        -DAPP_VERSION="${PROJECT_VERSION}"
        -DAPP_NAME="TabLauncher Demo"
    )
    
    set(TAB_LAUNCHER_TARGET tab_launcher_demo)
else()
    message(WARNING "Qt5WebEngineWidgets not found - TabBasedLauncher will have limited functionality")
    
    add_executable(tab_launcher_demo_simple
        src/TabBasedLauncher.cpp
        src/TabBasedLauncher.h
        examples/tab_launcher_main.cpp
    )

    target_link_libraries(tab_launcher_demo_simple
        Qt5::Core
        Qt5::Widgets
        Qt5::Gui
        ${X11_LIBRARIES}
    )
    
    target_compile_definitions(tab_launcher_demo_simple PRIVATE
        -DAPP_VERSION="${PROJECT_VERSION}"
        -DAPP_NAME="TabLauncher Demo (Simple)"
    )
    
    set(TAB_LAUNCHER_TARGET tab_launcher_demo_simple)
endif()

# ===========================================
# 方案3: VirtualDesktopManager - 虚拟桌面方案
# ===========================================
add_executable(virtual_desktop_demo
    src/VirtualDesktopManager.cpp
    src/VirtualDesktopManager.h
    examples/virtual_desktop_ubuntu_demo.cpp
)

target_link_libraries(virtual_desktop_demo
    Qt5::Core
    Qt5::Widgets
    Qt5::Gui
    ${X11_LIBRARIES}
)

target_compile_definitions(virtual_desktop_demo PRIVATE
    -DAPP_VERSION="${PROJECT_VERSION}"
    -DAPP_NAME="VirtualDesktop Demo"
)

# ===========================================
# 完整演示程序（包含所有方案）
# ===========================================
if(Qt5WebEngineWidgets_FOUND)
    add_executable(all_alternatives_demo
        src/WindowManager.cpp
        src/WindowManager.h
        src/TabBasedLauncher.cpp
        src/TabBasedLauncher.h
        src/VirtualDesktopManager.cpp
        src/VirtualDesktopManager.h
        examples/alternative_main.cpp
    )

    target_link_libraries(all_alternatives_demo
        Qt5::Core
        Qt5::Widgets
        Qt5::Gui
        Qt5::WebEngineWidgets
        ${X11_LIBRARIES}
    )
    
    target_compile_definitions(all_alternatives_demo PRIVATE
        -DQT_WEBENGINEWIDGETS_LIB
        -DAPP_VERSION="${PROJECT_VERSION}"
        -DAPP_NAME="All Alternatives Demo"
    )
    
    set(ALL_DEMO_TARGET all_alternatives_demo)
else()
    message(STATUS "Skipping all_alternatives_demo due to missing WebEngine")
    set(ALL_DEMO_TARGET "")
endif()

# ===========================================
# 安装配置
# ===========================================
# 确定要安装的目标
set(INSTALL_TARGETS 
    window_manager_demo 
    virtual_desktop_demo
    ${TAB_LAUNCHER_TARGET}
)

if(ALL_DEMO_TARGET)
    list(APPEND INSTALL_TARGETS ${ALL_DEMO_TARGET})
endif()

install(TARGETS ${INSTALL_TARGETS}
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib/static
)

# 安装脚本和配置文件
install(FILES 
    scripts/check_dependencies.sh
    scripts/final_verification.sh
    DESTINATION bin
    PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE
)

install(FILES
    docs/ubuntu1804_setup.md
    CODE_FIXES_SUMMARY.md
    DESTINATION share/doc/flightcontrols
)

# ===========================================
# 打包配置
# ===========================================
set(CPACK_PACKAGE_NAME "FlightControls-Alternatives")
set(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ${PROJECT_DESCRIPTION})
set(CPACK_PACKAGE_VENDOR "FlightControls Team")
set(CPACK_PACKAGE_CONTACT "flightcontrols@example.com")

set(CPACK_GENERATOR "TGZ;DEB")
set(CPACK_DEBIAN_PACKAGE_DEPENDS "libqt5core5a, libqt5gui5, libqt5widgets5, libx11-6, libxext6")

include(CPack)

# ===========================================
# 测试配置
# ===========================================
enable_testing()

# 基本编译测试
add_test(NAME compile_window_manager 
         COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target window_manager_demo)

add_test(NAME compile_virtual_desktop 
         COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target virtual_desktop_demo)

# 运行时测试（需要X11环境）
if(DEFINED ENV{DISPLAY})
    add_test(NAME run_window_manager_help
             COMMAND window_manager_demo --help)
    set_tests_properties(run_window_manager_help PROPERTIES 
                         TIMEOUT 10
                         WILL_FAIL true)  # 预期失败，因为我们的程序没有--help参数
endif()

# ===========================================
# 构建信息输出
# ===========================================
message(STATUS "")
message(STATUS "=== FlightControls Alternatives - Clean Build ===")
message(STATUS "Project Version: ${PROJECT_VERSION}")
message(STATUS "C++ Standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "Qt5 Version: ${Qt5_VERSION}")
message(STATUS "Build Targets: ${INSTALL_TARGETS}")
message(STATUS "")
message(STATUS "WebEngine Support: ${Qt5WebEngineWidgets_FOUND}")
message(STATUS "X11 Libraries: ${X11_LIBRARIES}")
message(STATUS "")
message(STATUS "Build commands:")
message(STATUS "  mkdir build && cd build")
message(STATUS "  cmake -f ../CMakeLists_alternatives_clean.txt ..")
message(STATUS "  make -j\$(nproc)")
message(STATUS "")
message(STATUS "Test commands:")
message(STATUS "  make test")
message(STATUS "")
message(STATUS "Package commands:")
message(STATUS "  make package")
message(STATUS "=================================================") 